Dedicated_Server_Architecture.txt
======================
Standard dedicated server architecture requires that the database listener should spawn a dedicated server process for each connection to the instance. These server processes will persist until the session is terminated. On UNIX environment – these will be actual processes. As more and more users log on, more server processes get launched; this is not a problem as far as oracle is concerned. The listener will launch as many processes as required (though there may be limits on the speed on which it can generate them). But you operating system may well have limits on the number of processes it can support.
 
A computer can only do one thing at a time – it simulates concurrent processing by using an algorithm to share CPU cycles across all currently executing processes. This often referred to as time-slicing takes care of allocating a few CPU cycles to each process in turn. This switching of taking one process off CPU in order to put another on is called a context switch and is expensive in terms of effort. As more users connect to an instance, the operating system has to context-switch between more and more server processes. The system then has to do a lot of work to restore the state of each process as it is brought on CPU and then save its state when it is switched off the CPU.
 
Depending on your operating system – this can cause major degradations in performance. Because a large proportion of the computers processing capacity is taken up with managing the context switches as opposed to actually doing work. This can also lead to memory problems as more and more sessions are established. The problem comes with the PGA allocation or program global area which is a block of memory associated with each server process to maintain the state of the session and a work area for such operations as sorting rows. This may cause swapping as the number of server processes increase. So in a dedicated server environment, performance may degrade if your operating system has problems managing a large number of concurrent processes and it will be exacerbated if there is insufficient memory available.
 
