-- Turn on force logging 
ALTER DATABASE FORCE LOGGING;

-- Create a password file 
orapwd file=orapwsandprd password=y force=y
cp $ORACLE_HOME/dbs/orapwsandprd $ORACLE_HOME/dbs/orapwsandsby 

-- Configure a standby redo Log 
ALTER DATABASE ADD STANDBY LOGFILE GROUP 4 '/ora/work/data/SANDPRD/onlinelog/stdby04.log' SIZE 50M;
ALTER DATABASE ADD STANDBY LOGFILE GROUP 5 '/ora/work/data/SANDPRD/onlinelog/stdby05.log' SIZE 50M;
ALTER DATABASE ADD STANDBY LOGFILE GROUP 6 '/ora/work/data/SANDPRD/onlinelog/stdby06.log' SIZE 50M;
ALTER DATABASE ADD STANDBY LOGFILE GROUP 7 '/ora/work/data/SANDPRD/onlinelog/stdby07.log' SIZE 50M;
archive log list; 
select * from v$logfile; 

-- Put into archivelog mode 
alter database archivelog; 

-- Pimary must be using spfile
sho parameter spfile 

-- Create a pfile for hacking 
SQL> create pfile='initsandsby.ora' from spfile; 

This is my standby pfile
oracle@solaris11:/ora/app/product/11.2.0.4/sandpit/dbs$ cat initsandsby.ora 
*.audit_file_dest='/ora/app/admin/sandsby/adump'
*.audit_trail='db'
*.compatible='11.2.0.0.0'
*.db_block_size=8192
*.db_name='sandprd'
*.db_unique_name='sandsby'
*.db_recovery_file_dest='/FRA'
*.db_recovery_file_dest_size=10485760000
*.log_archive_format='%t_%s_%r.dbf'

-- Primary initialisation parameter required changes
alter system set standby_file_management='auto' scope=spfile;
alter system set REMOTE_LOGIN_PASSWORDFILE='EXCLUSIVE' scope=spfile;
alter system set LOG_ARCHIVE_FORMAT='%t_%s_%r.arc' scope=spfile;
alter system set LOG_ARCHIVE_DEST_STATE_1='ENABLE' scope=spfile;
alter system set LOG_ARCHIVE_DEST_2='SERVICE=sandsby LGWR ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=sandsby' scope=spfile; 
alter system set LOG_ARCHIVE_CONFIG='DG_CONFIG=(sandprd,sandsby)' scope=spfile; 
alter system set log_archive_dest_1='LOCATION=USE_DB_RECOVERY_FILE_DEST' scope=spfile;
-- Modified the above parameters and just bounced my primary to speed things along
SQL> startup force; 

-- startup the standby instance using the pfile from above
SQL> startup nomount ;

-- Now add the above into Both listener files:
oracle@solaris11:/ora/app/product/11.2.0.4/sandpit/network/admin$ cat listener.ora | grep -v '^$' 
# listener.ora Network Configuration File: /ora/app/product/11.2.0.4/sandpit/network/admin/listener.ora
# Generated by Oracle configuration tools.
LISTENER =
  (DESCRIPTION_LIST =
    (DESCRIPTION =
      (ADDRESS = (PROTOCOL = TCP)(HOST = solaris11)(PORT = 1521))
      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))
    )
  )
ADR_BASE_LISTENER = /ora/app
# listener.ora --> entry for both on both sites
SID_LIST_LISTENER=
(SID_LIST =
 (SID_DESC =
    (GLOBAL_DBNAME = sandprd)
    (ORACLE_HOME = /ora/app/product/11.2.0.4/sandpit/)
    (SID_NAME = sandprd)
  )
  (SID_DESC =
    (GLOBAL_DBNAME = sandsby)
    (ORACLE_HOME = /ora/app/product/11.2.0.4/sandpit/)
    (SID_NAME = sandsby)
  )
) 
 # listener.ora --> entry for both on both sites

--> Reload the listener now 
oracle@solaris11:/ora/app/product/11.2.0.4/sandpit/network/admin$ lsnrctl status LISTENER|tail
Services Summary...
Service "sandprd" has 2 instance(s).
  Instance "sandprd", status UNKNOWN, has 1 handler(s) for this service...
  Instance "sandprd", status READY, has 1 handler(s) for this service...
Service "sandprdXDB" has 1 instance(s).
  Instance "sandprd", status READY, has 1 handler(s) for this service...
Service "sandsby" has 2 instance(s).
  Instance "sandsby", status UNKNOWN, has 1 handler(s) for this service...
  Instance "sandsby", status BLOCKED, has 1 handler(s) for this service...
The command completed successfully


-- Now sort out the TNS name aliases entries 
-- Add the below into the tnsnames.ora files on both hosts
## -- TNS Entries 
sandprd =
(DESCRIPTION =
 (ADDRESS = (PROTOCOL = TCP)(HOST = solaris11)(PORT = 1521))
 (CONNECT_DATA =
  (SERVER = DEDICATED)
  (SERVICE_NAME = sandprd)
 )
)
sandsby =
(DESCRIPTION =
 (ADDRESS = (PROTOCOL = TCP)(HOST = solaris11)(PORT = 1521))
 (CONNECT_DATA =
  (SERVER = DEDICATED)
  (SERVICE_NAME = sandsby)
 )
)
## -- TNS Entries 

$ tnsping sandprd 
$ tnsping sandsby 

sqlplus sys/oracle@sandprd as sysdba
sqlplus sys/oracle@sandsby as sysdba

-- Now run the RMAN duplicate 
rman target=sys/oracleX@sandprd auxiliary=sys/oracleX@sandsby 
oracle@solaris11:/ora/work/data$ rman target=sys/oracleX@sandprd auxiliary=sys/oracleX@sandsby 
Recovery Manager: Release 11.2.0.1.0 - Production on Thu Jun 4 12:28:42 2015
Copyright (c) 1982, 2009, Oracle and/or its affiliates.  All rights reserved.
connected to target database: SANDPRD (DBID=479009792)
connected to auxiliary database: SANDPRD (not mounted)

RUN
{
SET NEWNAME FOR DATAFILE 1 TO '/ora/work/data/SANDSBY/datafile/o1_mf_system_b4c34452_.dbf';
SET NEWNAME FOR DATAFILE 2 TO '/ora/work/data/SANDSBY/datafile/o1_mf_sysaux_b4c344co_.dbf';
SET NEWNAME FOR DATAFILE 3 TO '/ora/work/data/SANDSBY/datafile/o1_mf_undotbs1_b4c344dr_.dbf';
SET NEWNAME FOR DATAFILE 4 TO '/ora/work/data/SANDSBY/datafile/o1_mf_users_b4c344g0_.dbf';
SET NEWNAME FOR DATAFILE 5 TO '/ora/work/data/SANDSBY/datafile/repo_01.dbf';
SET NEWNAME FOR TEMPFILE 1 TO '/ora/work/data/SANDSBY/temp01.dbf'; 
 DUPLICATE TARGET DATABASE FOR STANDBY FROM ACTIVE DATABASE;
}

-- Once you get the clone done successfully for the standby database 
-- Invoke the recovery process
alter database recover managed standby database disconnect from session;


-- Switch a logfile to check the recovery process
alter system switch logfile;
alter system switch logfile;
archive log list 

-- Do not forget to set the fal settings for sequence gaps 
* Primary Side *
alter system set fal_client='sandsby';
alter system set fal_server='sandprd';

* Standby side *
alter system set fal_client='sandprd';
alter system set fal_server='sandsby';

-- Checking the state of the recovery 
* Primary Side *
select max(sequence#) from v$log_history;
select max(sequence#) from v$archived_log;
col DEST_NAME for a20
col DESTINATION for a20
select dest_name, status, destination from  v$archive_dest_status;

* Standby Side *
select max(sequence#) from v$log_history;
select max(sequence#) from v$archived_log;

